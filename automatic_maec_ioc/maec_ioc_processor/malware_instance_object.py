'''
@author: george
'''

from cybox.core.object import Object as OB, add_external_class, DomainSpecificObjectProperties
from cybox.objects.file_object import File
from cybox.common.object_properties import CustomProperties ,Property

from mixbox.idgen import IDGenerator
from maec.utils.nsparser import Namespace



class MalwareInstanceObject(OB):
    '''
    classdocs
    '''


    def __init__(self, typeObject=File(),idref='',namespace='',prefix=''):

        self.properties = File()
        self.idgen = IDGenerator()
        #Define Attributes 
        #Define id or idref
        if idref=='':
            self.setid(namespace=namespace, prefix_=prefix)
        else:
            self.idref =idref
        #define has_changed
        self.has_changed = False
        # Add external class Location as an attribute of Malware Instance
        add_external_class(klass=Location,name='Location')
        # Add external class Domain_Specific_Object_Properties as an attribute of Malware Instance
        add_external_class(klass=Domain_Specific_Object_Properties,name='Domain_Specific_Object_Properties')
        
    def setid(self,namespace='',prefix_='bundle'):
        '''
        The given namespace should be had the form xmlns:prefix="URI"
        '''
        if namespace =='' :
            self.id_= self.idgen.create_id(prefix=prefix_)
        else :
            mixedname =''.join(namespace.split(':')[1:])
            name = mixedname.split('=')[1]
            px=mixedname.split('=')[0]
            ns = Namespace(name=name,prefix=px)
            self.idgen._namespace=ns
            self.id_ = self.idgen.create_id(prefix=prefix_) 
    
    def haschanged(self,changed=False):
        self.has_changed =changed        
        
    def setstate(self,state):
        self.state =state
        
    def setdescription(self,description):
        self.description = str(description)
    
    def setproperties(self,property):
        pass

    def createproperty(self,propid='',idref='',datatype='',appears_random=False,is_obfuscated=False,obf_alg='',is_defanged=False,def_alg='',ref_tran_type='',ref_tran='',obs_enc=''):
        property = Property()
        if idref=='':
            property.id_ = propid
        else:
            property.idref = idref
        property.datatype = datatype
        property.appears_random = appears_random
        property.is_obfuscated = is_obfuscated
        property.obfuscation_algorithm_ref = obf_alg
        property.is_defanged = is_defanged
        property.defanging_algorithm_ref = def_alg
        property.refanging_transform_type=ref_tran_type
        property.refanging_transform = ref_tran
        property.observed_encoding =obs_enc
        return property

    #OK
    def setlocation(self,location,id='',idref=''):
        '''
        Set Location attribute to malware instance
        :param id:Set unique location id if exist
        :param idref: Specifies a reference to a unique ID defined elsewhere.
        :param location: Specifies  a physical location
        :return:
        '''
        self.Location.id = id
        self.Location.idref = idref
        self.Location.location = location

    def setdomainspecificobjectproperties(self,dsop=None):
        self.Domain_Specific_Object_Properties = dsop


    #OK
    def setrelatedobjects(self,related_obj=None,relationship='',inline=True):
        '''
        Adds a related object, the object is child of cybox.core.Object.
        Relationship attribute takes values only from the set cybox_default_vocabularies:ObjectRelationshipEnum.
        Inline attribute specifies  inheritance with the instance.
        '''
        self.add_related(related=related_obj,relationship=relationship,inline=inline)

    #OK
    def setdefinedeffect(self,effect=''):
        '''
        Defined_Effect attribute takes values only from the set cybox_core:EffectTypeEnum
        '''
        self.__setattr__('Definned_Effect',effect)


    def setdiscoverymethod(self):
        pass

#OK
class Domain_Specific_Object_Properties(DomainSpecificObjectProperties):

    def __init__(self):
        super(DomainSpecificObjectProperties,self).__init__()
#OK
class Location():

    def __init__(self,location,location_id='',location_idref=''):
        '''
        Creates an object that describes  a relevant physical location.
        '''
        self.location = location
        self.id = location_id
        self.idref = location_idref

class Discovery_Method():
    pass

if __name__=='__main__':
    mi = MalwareInstanceObject()
    mi.setre


    
    