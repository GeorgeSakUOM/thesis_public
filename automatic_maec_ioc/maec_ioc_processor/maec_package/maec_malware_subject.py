__author__ = 'george'

from maec.package import MalwareSubject, MalwareConfigurationDetails,MalwareConfigurationObfuscationAlgorithm,MalwareConfigurationStorageDetails,MalwareConfigurationObfuscationDetails,\
    MalwareConfigurationParameter ,MalwareBinaryConfigurationStorageDetails,MalwareDevelopmentEnvironment,MinorVariants,MalwareSubjectRelationship,MalwareSubjectRelationshipList, \
    MalwareSubjectReference, FindingsBundleList,MetaAnalysis,ObjectEquivalenceList,ActionEquivalenceList,ActionEquivalence
from maec.package.object_equivalence import ObjectEquivalence
from mixbox.idgen import IDGenerator,create_id,set_id_method,set_id_namespace
from cybox.common import VocabString,PlatformSpecification,PlatformIdentifier,StructuredText
from maec.bundle.object_reference import ObjectReference
from cybox.core.action_reference import ActionReference



class MaecMalwareSubject(MalwareSubject):

    def __init__(self,id=None,namespace=None,malware_instance_object_attributes=None,relationships=None,minor_variants=None,labels=None,findings_bundles=None,
                 development_environment=None,configuration_details=None,compatible_platform=None,analyses=None):
        super(MaecMalwareSubject, self).__init__(id=id,malware_instance_object_attributes=malware_instance_object_attributes)
        if id is None and namespace is not None:
            set_id_method(IDGenerator.METHOD_UUID)
            set_id_namespace(namespace)
            self.id_ = create_id(prefix="malware_subject")

        self.relationships =MalwareSubjectRelationshipList()
        if relationships is not None:
            for relationship in relationships:
                if isinstance(relationship,MalwareSubjectRelationship):
                    self.relationships.append(relationship)
        self.minor_variants = MinorVariants()
        if minor_variants is not None:
            for minor_variant in minor_variants:
                self.minor_variants.append(minor_variant)
        self.label=[]
        if labels is not None:
            for label in labels:
                self.label.append(VocabString(label))
        self.findings_bundles = FindingsBundleList()
        if findings_bundles is not None and isinstance(findings_bundles,FindingsBundleList):
            self.findings_bundles = findings_bundles
        self.development_environment = development_environment
        self.configuration_details =configuration_details
        self.compatible_platform =compatible_platform
        self.analyses = analyses

    def addlabel(self,label=None):
        self.label.append(VocabString(label))

    def addmalwareinstanceobjectattributes(self,malware_instance_object_attributes=None):
        self.set_malware_instance_object_attributes(malware_instance_object_attributes=malware_instance_object_attributes)

    def addconfigurationdeatails(self,configuration_details):
        if isinstance(configuration_details,MalwareConfigurationDetails):
            self.configuration_details =configuration_details

    def addminorvariant(self,minor_variant=None):
        self.minor_variants.append(minor_variant)

    def addcompatibleplatform(self,compatible_platform=None):
        self.compatible_platform = compatible_platform

    def addrelationship(self,relationship=None):
        self.relationships.append(relationship)

    def addbundleinfindingbundles(self,bundle=None):
        self.add_findings_bundle(bundle)

    def addmetaanalysisinfindingbundles(self,meta_analysis):
        self.findings_bundles.meta_analysis=meta_analysis

    def addexternalreferenceinfindingbundles(self,external_reference):
        self.findings_bundles.add_bundle_external_reference(external_reference)

    def createfindingbundlesmetaanalysis(self,object_equivalences=None,action_equivalences=None):
        meta_analysis = MetaAnalysis()
        meta_analysis.object_equivalences =ObjectEquivalenceList()
        if object_equivalences is not None:
            for object_equivalence in object_equivalences :
                meta_analysis.object_equivalences.append(object_equivalence)
        meta_analysis.action_equivalences = ActionEquivalenceList()
        if action_equivalences is not None:
            for action_equivalence in action_equivalences:
                meta_analysis.action_equivalences.append(action_equivalence)
        return meta_analysis

    def createfindingbundlesmetaanalysisobjectequivalence(self,id=None,object_references=None):
        object_equivalence = ObjectEquivalence()
        object_equivalence.id_ =id
        object_equivalence.object_reference=object_references
        return object_equivalence

    def createfindingbundlesmetaanalysisobjectequivalencereference(self,object_idref=None):
        #unresolved library bug
        reference = ObjectReference()
        reference.object_idref =object_idref
        return reference

    def createfindingbundlesmetaanalysisactionequivalence(self,action_references=None):
        action_equivalence = ActionEquivalence()
        action_equivalence.action_reference=action_references
        return action_equivalence

    def createfindingbundlesmetaanalysisactionequivalencereference(self,action_id=None):
        return ActionReference(action_id=action_id)

    def createrelationship(self,type=None,malware_subject_reference=None):
        relationship= MalwareSubjectRelationship()
        relationship.type_ = VocabString(value=type)
        relationship.malware_subject_reference=malware_subject_reference
        return relationship

    def createrelationshipreference(self,malware_subject_idref=None):
        reference = MalwareSubjectReference()
        reference.malware_subject_idref = malware_subject_idref
        return reference

    def createcompatibleplatform(self,description=None,identifiers=None):
        platform = PlatformSpecification()
        if description is not None:
            platform.description= StructuredText(value=description)
        if not identifiers is None:
            for identifier in identifiers:
                platform.identifiers.append(identifier)
        return platform

    def createcompatibleplatformidentifier(self,system=None,system_ref =None):
        identifier = PlatformIdentifier()
        identifier.system =system
        identifier.system_ref =system_ref
        return identifier

    def createconfigurationdetails(self,storage=None,obfuscation=None,configuration_parameter=None):
        configuration_details = MalwareConfigurationDetails()
        configuration_details.storage =storage
        configuration_details.obfuscation = obfuscation
        configuration_details.configuration_parameter = configuration_parameter
        return configuration_details

    def createconfigurationdetailsstorage(self,malware_binary=None,url=None,file=None):
        storage = MalwareConfigurationStorageDetails()
        storage.url =url
        storage.malware_binary = malware_binary
        storage.file =file
        return storage

    def createconfigurationdetailsstoragemalwarebinary(self,section_offset=None,section_name=None,file_offset=None):
        malware_binary = MalwareBinaryConfigurationStorageDetails()
        malware_binary.section_offset = section_offset
        malware_binary.section_name = section_name
        malware_binary.file_offset = file_offset
        return malware_binary

    def createconfigurationdetailsobfuscation(self,is_encrypted=None,is_encoded=None,algorithm_details=None):
        obfuscation = MalwareConfigurationObfuscationDetails()
        obfuscation.is_encrypted=is_encrypted
        obfuscation.is_encoded = is_encoded
        if algorithm_details is not None:
            for algorithm in algorithm_details:
                if isinstance(algorithm,MalwareConfigurationObfuscationAlgorithm):
                    obfuscation.algorithm_details.append(algorithm)
        return obfuscation

    def createconfigurationdetailsobfuscationalgorithm(self,ordinal_position=None,key=None,algorithm_name=None):
        algorithm = MalwareConfigurationObfuscationAlgorithm()
        algorithm.ordinal_position = ordinal_position
        algorithm.key = key
        algorithm.algorithm_name = algorithm_name
        return algorithm

    def createconfigurationdetailsconfparameter(self,value=None,name=None):
        configuration_parameter = MalwareConfigurationParameter()
        configuration_parameter.name=VocabString(name)
        configuration_parameter.value =value
        return configuration_parameter

    def adddevelopmentenvironment(self,development_environment=None):
        self.development_environment=development_environment

    def createdevelopmentenvironment(self,debugging_file=None,tools=None):
        development_environment = MalwareDevelopmentEnvironment()
        development_environment.tools = tools
        development_environment.debugging_file=debugging_file
        return development_environment


if __name__ =='__main__':
    #Testing example
    from mixbox.namespaces import Namespace
    ms  = MaecMalwareSubject(namespace=Namespace('testnamespace','totest','testschemalocation'))
    ####################################################################################################################
    #Add labeols
    ms.addlabel(label='adware')
    ms.addlabel(label='appender')
    ####################################################################################################################
    #Add malware instance object attributes
    from maec_ioc_processor.cybox.cybox_object import CyboxObject
    co = CyboxObject()
    co.objecttype.file_name='Testing object name'
    ms.addmalwareinstanceobjectattributes(malware_instance_object_attributes=co.objecttype)
    ####################################################################################################################
    #Add configuration details
    conf_par1= ms.createconfigurationdetailsconfparameter(name='magic number',value=15)
    conf_par2= ms.createconfigurationdetailsconfparameter(name='filename',value='Test name')
    alg1 = ms.createconfigurationdetailsobfuscationalgorithm(ordinal_position=12,key=hex(12345),algorithm_name='AES')
    alg2 = ms.createconfigurationdetailsobfuscationalgorithm(ordinal_position=13,key=hex(11111),algorithm_name='DES')
    obfuscation = ms.createconfigurationdetailsobfuscation(is_encoded=True,is_encrypted=True,algorithm_details=[alg1,alg2])
    malware_binary = ms.createconfigurationdetailsstoragemalwarebinary(section_offset=hex(12345),section_name='Test section name',file_offset=hex(1111111))
    from cybox.objects.file_object import File
    from cybox.objects.uri_object import URI
    file = File()
    file.file_name ='Test filename'
    url = URI()
    url.value ='http://testurl'
    storage = ms.createconfigurationdetailsstorage(malware_binary=malware_binary,url=url,file=file)
    conf_details =ms.createconfigurationdetails(configuration_parameter=[conf_par1,conf_par2],obfuscation=obfuscation,storage=storage)
    ms.addconfigurationdeatails(conf_details)
    ####################################################################################################################
    #Add development environment
    from cybox.common.tools import ToolInformation
    from cybox.common import String
    tool2 = ToolInformation()
    tool2.name='test tool name'
    tool2.type_.append(String('compiler'))
    debug_file =File()
    debug_file.file_name="test debug file"
    development_env = ms.createdevelopmentenvironment(debugging_file=debug_file,tools=tool2)
    ms.adddevelopmentenvironment(development_environment=development_env)
    ####################################################################################################################
    #Add minor variants
    mv1 = CyboxObject()
    mv1.objecttype.file_name='Test minor variant 1'
    mv2 = CyboxObject()
    mv2.objecttype.file_name='Test minor variant 2'
    ms.addminorvariant(mv1.objecttype)
    ms.addminorvariant(mv2.objecttype)
    ####################################################################################################################
    #Add Analysis
    from maec_ioc_processor.maec_package import MaecAnalysis
    analysis = MaecAnalysis()
    analysis.add_method('dynamic')
    ms.add_analysis(analysis)
    ####################################################################################################################
    #Add compatible platform
    ident1 = ms.createcompatibleplatformidentifier(system='win',system_ref='test refer')
    ident2 = ms.createcompatibleplatformidentifier(system='unix',system_ref='test_refer2')
    pl1 = ms.createcompatibleplatform(description='testing platform',identifiers=[ident1,ident2])
    ms.addcompatibleplatform(compatible_platform=pl1)
    ####################################################################################################################
    #Add relationship
    reference1 = ms.createrelationshipreference(malware_subject_idref='Test idref 1')
    reference2 = ms.createrelationshipreference(malware_subject_idref='Test idref 2')
    reference3 = ms.createrelationshipreference(malware_subject_idref='Test idref 3')
    reference4 = ms.createrelationshipreference(malware_subject_idref='Test idref 4')
    relationship1=ms.createrelationship(type='downloads',malware_subject_reference=[reference1,reference2])
    relationship2=ms.createrelationship(type='downloaded by',malware_subject_reference=[reference3,reference4])
    ms.addrelationship(relationship=relationship1)
    ms.addrelationship(relationship=relationship2)
    ####################################################################################################################
    #Add findings bundle
    from maec.bundle import Bundle
    bundle1 = Bundle()
    bundle1.content_type='dynamic analysis tool output'
    bundle2 = Bundle()
    bundle2.content_type='static analysis tool output'
    ms.addbundleinfindingbundles(bundle2)
    ms.addbundleinfindingbundles(bundle1)
    mr1 = ms.createfindingbundlesmetaanalysisobjectequivalencereference(object_idref=create_id(prefix='obj_ref'))
    mr2 = ms.createfindingbundlesmetaanalysisobjectequivalencereference(object_idref=create_id(prefix='obj_ref'))
    object_eq = ms.createfindingbundlesmetaanalysisobjectequivalence(id=create_id(prefix='obj_equiv'),object_references=[mr1,mr2])
    ar1 = ms.createfindingbundlesmetaanalysisactionequivalencereference(action_id='test action id 1')
    ar2 = ms.createfindingbundlesmetaanalysisactionequivalencereference(action_id='test action id 2')
    action_eq = ms.createfindingbundlesmetaanalysisactionequivalence(action_references=[ar1,ar2])
    meta_analysis = ms.createfindingbundlesmetaanalysis(object_equivalences=[object_eq],action_equivalences=[action_eq])
    ms.addmetaanalysisinfindingbundles(meta_analysis=meta_analysis)
    ms.addexternalreferenceinfindingbundles(['testing refer qname 1','testing refer qname 2'])
    #Printing results
    print(ms.to_xml())